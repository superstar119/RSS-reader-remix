{
  "version": 3,
  "sources": ["../../app/routes/register.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\register.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\register.tsx\");\n  import.meta.hot.lastModified = \"1705898932181.761\";\n}\n// REMIX HMR END\n\nimport { useEffect, useRef } from \"react\";\nimport { Form, Link, useActionData } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\nimport { createUser, getUserByEmail } from \"~/models/user.server\";\nimport { validateEmail } from \"~/utils/utils\";\nimport { Heading } from \"~/components/ui/text\";\nimport { Label } from \"~/components/ui/label\";\nimport { Input } from \"~/components/ui/input\";\nimport { Button } from \"~/components/ui/button\";\nimport { createUserSession } from \"~/models/session.server\";\nexport const meta = () => [{\n  title: \"Register | RSS Feed\"\n}];\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  if (!validateEmail(email)) {\n    return json({\n      errors: {\n        email: \"Email is invalid\",\n        password: null\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json({\n      errors: {\n        email: null,\n        password: \"Password is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (password.length < 8) {\n    return json({\n      errors: {\n        email: null,\n        password: \"Password is too short\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  const existingUser = await getUserByEmail(email);\n  if (existingUser) {\n    return json({\n      errors: {\n        email: \"A user already exists with this email\",\n        password: null\n      }\n    }, {\n      status: 400\n    });\n  }\n  const user = await createUser(email, password);\n  return createUserSession({\n    redirectTo: \"/\",\n    remember: false,\n    request,\n    userId: user.id\n  });\n};\nexport default function Register() {\n  _s();\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n  const actionData = useActionData();\n  useEffect(() => {\n    if (actionData?.errors.email) {\n      emailRef.current?.focus();\n    }\n    if (actionData?.errors.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n  return <div className=\"max-w-[400px] mx-auto min-w-[350px] h-full flex flex-col items-center justify-center animate-fade-in\">\r\n      <div className=\"w-full m-[16px] flex flex-col gap-[40px] items-start box-border\">\r\n        <Heading>Sign up</Heading>\r\n\r\n        <Form className=\"w-full flex flex-col gap-[16px] items-start\" method=\"post\">\r\n          <div className=\"w-full flex flex-col gap-[8px] items-start\">\r\n            <Label htmlFor=\"email\" className=\"text-[16px] leading-[150%]\">\r\n              Email address\r\n            </Label>\r\n            <Input type=\"email\" id=\"email\" autoFocus={true} name=\"email\" ref={emailRef} aria-invalid={actionData?.errors.email ? true : undefined} required placeholder=\"richard@piedpiper.com\" className=\"rounded-[3px] px-[20px] py-[16px] text-[16px] leading-[150%] h-[56px] focus-visible:ring-0 focus-visible:ring-offset-0 border-[#f1f1f1] focus:border-black placeholder:text-[#c0c0c0]\" />\r\n            {actionData?.errors.email && <div className=\"pt-1 text-red-700 animate-fade-in\">\r\n                {actionData.errors.email}\r\n              </div>}\r\n          </div>\r\n\r\n          <div className=\"w-full flex flex-col gap-[8px] items-start\">\r\n            <Label htmlFor=\"password\" className=\"text-[16px] leading-[150%]\">\r\n              Password\r\n            </Label>\r\n            <Input type=\"password\" name=\"password\" ref={passwordRef} className=\"rounded-[3px] px-[20px] py-[16px] text-[16px] leading-[150%] h-[56px] focus-visible:ring-0 focus-visible:ring-offset-0 border-[#f1f1f1] focus:border-black placeholder:text-[#c0c0c0]\" required placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\" />\r\n            {actionData?.errors.password && <div className=\"pt-1 text-red-700 animate-fade-in\">\r\n                {actionData.errors.password}\r\n              </div>}\r\n          </div>\r\n\r\n          <div className=\"w-full flex justify-start\">\r\n            <Button className=\"w-[150px] text-[Inter] text-[16px] leading-[150%] text-white px-[15px] py-[10px] rounded-[3px]\" type=\"submit\">\r\n              Create account\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n\r\n        <div className=\"text-[#7b7b7b] text-[16px] leading-[150%] font-normal\">\r\n          Or{\" \"}\r\n          <Link className=\"underline p-0 text-[#7b7b7b] text-[16px] leading-[150%] font-normal\" to={{\n          pathname: \"/login\"\n        }}>\r\n            login\r\n          </Link>{\" \"}\r\n          if you have an account.\r\n        </div>\r\n      </div>\r\n    </div>;\n}\n_s(Register, \"KXzIeC2cTFt/ua30svyQl8QbRpg=\", false, function () {\n  return [useActionData];\n});\n_c = Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
